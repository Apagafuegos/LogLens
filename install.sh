#!/bin/bash

# LogLens Installation Script
# Compiles and installs LogLens to ~/.local/bin with unified data directory


echo "üöÄ LogLens Installation Script"
echo "=============================="

# Check if we're in the correct directory
if [[ ! -f "Cargo.toml" ]] || ! grep -q "members = \[\"loglens-core\"" Cargo.toml; then
    echo "‚ùå Error: This script must be run from the LogLens project directory"
    echo "   Make sure you're in the directory containing the workspace Cargo.toml"
    exit 1
fi

# Check if Rust/Cargo is installed
if ! command -v cargo &> /dev/null; then
    echo "‚ùå Cargo not found. Installing Rust..."
    echo "üì• Downloading and installing Rust via rustup..."
    
    # Check if curl is available
    if command -v curl &> /dev/null; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        # Source cargo environment
        source "$HOME/.cargo/env"
        
        # Verify installation
        if command -v cargo &> /dev/null; then
            echo "‚úÖ Rust installed successfully!"
            echo "üìç Location: $(which cargo)"
        else
            echo "‚ùå Error: Rust installation failed"
            echo "   Please install manually: https://rustup.rs/"
            exit 1
        fi
    else
        echo "‚ùå Error: curl not found. Cannot install Rust automatically"
        echo "   Please install Rust manually: https://rustup.rs/"
        exit 1
    fi
else
    echo "‚úÖ Found Cargo: $(cargo --version)"
fi

# Create LogLens data directory
echo "üìÅ Creating LogLens data directory..."
mkdir -p ~/.loglens/data
mkdir -p ~/.loglens/logs
mkdir -p ~/.loglens/config

# Create local bin directory if it doesn't exist
echo "üìÅ Creating ~/.local/bin directory..."
mkdir -p ~/.local/bin

# Kill any running loglens processes to avoid "Text file busy" error
#echo "üîÑ Stopping any running LogLens processes..."
#pkill -f loglens || true
#sleep 1

# Build release version
echo "üî® Building LogLens (release mode)..."
cargo build --release --package loglens-cli

# Build frontend
echo "üé® Building frontend..."
cd loglens-web/frontend-react
if command -v npm &> /dev/null; then
    npm install
    npm run build
    cd ../..

    # Create frontend directory in release target
    echo "üì¶ Preparing frontend files for installation..."
    mkdir -p target/release/frontend
    cp -r loglens-web/frontend-react/dist/* target/release/frontend/

    if [ ! -f "target/release/frontend/index.html" ]; then
        echo "‚ùå Error: Frontend build failed - index.html not found"
        exit 1
    fi
    echo "‚úÖ Frontend files prepared successfully"
else
    echo "‚ö†Ô∏è  Warning: npm not found, frontend will not be built"
    echo "   Please install Node.js and npm, then run:"
    echo "   cd loglens-web/frontend-react && npm install && npm run build"
    cd ../..
fi

if [[ ! -f "target/release/loglens" ]]; then
    echo "‚ùå Error: Build failed - executable not found"
    exit 1
fi

# Get file size
SIZE=$(du -h target/release/loglens | cut -f1)
echo "‚úÖ Build successful! Executable size: $SIZE"

# Install to PATH
echo "üì¶ Installing to ~/.local/bin/loglens..."
cp target/release/loglens ~/.local/bin/
chmod +x ~/.local/bin/loglens

# Install frontend files
echo "üé® Installing frontend files..."
if [ -d "target/release/frontend" ] && [ -f "target/release/frontend/index.html" ]; then
    mkdir -p ~/.local/bin/frontend
    cp -r target/release/frontend/* ~/.local/bin/frontend/

    if [ -f ~/.local/bin/frontend/index.html ]; then
        echo "‚úÖ Frontend files installed successfully"
    else
        echo "‚ùå Error: Frontend installation failed - index.html not copied"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Warning: Frontend files not found in target/release/frontend"
    echo "   The web interface may not work correctly"
fi

# Set up environment configuration
echo "‚öôÔ∏è Setting up environment configuration..."
cat > ~/.loglens/config/config.toml << 'EOF'
# LogLens Configuration
# Generated by install.sh

data_dir = "~/.loglens/data"
log_level = "info"

[ai]
default_provider = "openrouter"

[database]
path = "~/.loglens/data/loglens.db"

[dashboard]
port = 3000
host = "127.0.0.1"

[mcp_server]
port = 3001
host = "127.0.0.1"
EOF

# Create systemd service file for MCP server (optional)
echo "üîß Setting up systemd service (optional)..."
cat > ~/.loglens/config/loglens-mcp.service << 'EOF'
[Unit]
Description=LogLens MCP Server
After=network.target

[Service]
Type=simple
User=$USER
ExecStart=$HOME/.local/bin/loglens --mcp-server
Restart=on-failure
RestartSec=5
Environment=LOGLENS_DATA_DIR=$HOME/.loglens/data

[Install]
WantedBy=multi-user.target
EOF

echo "üí° To enable systemd service, run:"
echo "   cp ~/.loglens/config/loglens-mcp.service ~/.config/systemd/user/"
echo "   systemctl --user enable loglens-mcp.service"
echo "   systemctl --user start loglens-mcp.service"

# Check if ~/.local/bin is in PATH
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    echo "‚ö†Ô∏è  Warning: ~/.local/bin is not in your PATH"
    echo "   Add this line to your ~/.bashrc or ~/.zshrc:"
    echo "   export PATH=\"\$HOME/.local/bin:\$PATH\""
    echo ""
fi

# Check if Cargo bin is in PATH (for newly installed Rust)
if [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
    echo "‚ö†Ô∏è  Warning: ~/.cargo/bin is not in your PATH"
    echo "   Add this line to your ~/.bashrc or ~/.zshrc:"
    echo "   export PATH=\"\$HOME/.cargo/bin:\$PATH\""
    echo ""
fi

# Test installation
echo "üß™ Testing installation..."
if command -v loglens &> /dev/null; then
    echo "‚úÖ LogLens installed successfully!"
    echo "üìç Location: $(which loglens)"
    echo ""
    echo "Usage examples:"
    echo "  loglens --help                    # Show help"
    echo "  loglens --file /var/log/app.log   # Analyze log file"
    echo "  loglens --dashboard               # Start web dashboard"
    echo "  loglens --mcp-server              # Start MCP server (stdio mode)"
    echo "  loglens --mcp-server --mcp-transport http  # Start MCP server (HTTP mode)"
    echo "  loglens --mcp-server --mcp-port 8080       # Start MCP server on custom port"
    echo "  loglens init                      # Initialize project"
    echo ""
    echo "Data directory: ~/.loglens/data"
    echo "Configuration: ~/.loglens/config/config.toml"
    echo ""
    echo "MCP Server tools available:"
    echo "  - list_projects: List available LogLens projects"
    echo "  - get_project: Get detailed project information"
    echo "  - list_analyses: List analyses for a project"
    echo "  - get_analysis: Get complete analysis results"
    echo "  - get_analysis_status: Get analysis status for polling"
    echo "  - analyze_file: Trigger new analysis on existing file"
    echo ""
    echo "Docker usage:"
    echo "  docker run -p 8080:8080 -v ~/.loglens/data:/app/data loglens --dashboard"
    echo "  docker run -p 3001:3001 -v ~/.loglens/data:/app/data loglens --mcp-server"
else
    echo "‚ùå Installation failed - loglens not found in PATH"
    exit 1
fi

echo "üéâ Installation complete!"
